type Query {
  positions(
    filter: PositionFilterInput
    sort: [PositionSortField] = []
    page: Int = 0
    size: Int = 10
  ): [PositionType]
  coins(
    filter: CoinFilterInput
    sort: [CoinSortInput] = []
    page: Int = 0
    size: Int = 10
  ): [CoinType]
}

type PositionType {
  id: ID!
  coin: CoinType
  holdings: FiatCoinType
  avgBuyPrice: Float
  goals: [CalculatedGoalType]
  totalProfit: PnlType
}

type CalculatedGoalType {
  id: ID!
  weight: Int
  sellPrice: FiatPercentType
  sellAmount: FiatCoinPercentType
  holdingsRemain: FiatCoinType
  pnl: PnlType
}

type FiatPercentType {
  fiatAmount: Float
  percent: Float
}

type FiatCoinPercentType {
  fiatAmount: Float
  coinAmount: Float
  percent: Float
}

type FiatCoinType {
  fiatAmount: Float
  coinAmount: Float
}

type PnlType {
  percent: Float
  fiatAmount: Float
}

input PositionFilterInput {
  coinFilter: CoinFilterInput
}

input PositionSortInput {
  field: PositionSortField! = ID
  direction: SortDirection = ASC
}

enum PositionSortField {
  ID
}

type CoinType {
  id: ID!
  price: Float
  name: String
  symbol: String
  change24h: Float
}

input CoinFilterInput {
  name: StringFilter
  symbol: StringFilter
}

input CoinSortInput {
  field: CoinSortField! = ID
  direction: SortDirection = ASC
}

enum CoinSortField {
  ID
  NAME
}

enum SortDirection {
  ASC
  DESC
}

input StringFilter {
  eq: String
  cont: String
}
